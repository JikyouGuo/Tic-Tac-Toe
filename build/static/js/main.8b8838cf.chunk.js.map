{"version":3,"sources":["types/enums.ts","components/Piece/index.tsx","components/Board/index.tsx","components/GameInfo/index.tsx","components/Game/index.tsx","Test.tsx","App.tsx","index.tsx"],"names":["PieceType","GameStatus","Piece","piece","type","onClick","black","className","red","none","Board","pieces","isGameOver","isGameOverProp","list","map","pt","i","key","defaultProps","GameInfo","status","gameStatus","turn","gaming","draw","blackWin","redWin","content","Game","state","nextDrop","handlePieceClick","getGameStatus","setState","prevState","getNextDrop","this","init","Array","fill","Component","horiMin","Math","floor","vertiMin","includes","prevNextDrop","curGameStatus","Test","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAAYA,EAKAC,E,qFALAD,O,eAAAA,I,aAAAA,I,kBAAAA,M,cAKAC,O,mBAAAA,I,eAAAA,I,uBAAAA,I,oBAAAA,M,eCECC,EAA0B,SAAC,GAAuB,IACzDC,EADoCC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAK9C,OAHID,IAASJ,EAAUM,MAASH,EAAQ,yBAAKI,UAAU,qBAC9CH,IAASJ,EAAUQ,IAAOL,EAAQ,yBAAKI,UAAU,mBACjDH,IAASJ,EAAUS,OAAQN,EAAQ,yBAAKI,UAAU,qBAEzD,yBAAKA,UAAU,QACbF,QAAS,WACHD,IAASJ,EAAUS,MAAQJ,GAAWA,MAG3CF,ICPMO,G,MAA0B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,WAAYP,EAAc,EAAdA,QACtDQ,EAAiBD,EACjBE,EAAOH,EAAOI,KAClB,SAACC,EAAIC,GAAL,OAAW,kBAAC,EAAD,CACTC,IAAKD,EACLb,KAAMY,EACNX,QAAS,WACHA,IAAYQ,GACdR,EAAQY,SAIhB,OACE,yBAAKV,UAAU,SACZO,KAIPJ,EAAMS,aAAe,CACnBP,YAAY,G,UCpBDQ,EAA6B,SAAC,GAAmC,IACxEC,EADuCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,KAAMlB,EAAc,EAAdA,QAEzDiB,IAAerB,EAAWuB,OAE1BH,EADEE,IAASvB,EAAUM,MACZ,2BAGA,2BAGJgB,IAAerB,EAAWwB,KAAQJ,EAAS,eAC3CC,IAAerB,EAAWyB,SAAYL,EAAS,qBAC/CC,IAAerB,EAAW0B,SAAUN,EAAS,sBACtD,IAAMO,EAAU,yBACdrB,UAAW,WACRe,IAAerB,EAAWuB,OAAS,UAAY,KAC/CD,IAASvB,EAAUM,MAAQ,SAAW,SACzCe,GACF,OACE,yBAAKd,UAAU,QACZqB,EACD,4BAAQvB,QAASA,GAAjB,aCpBOwB,EAAb,4MACEC,MAAgB,CACdnB,OAAQ,GACRW,WAAYrB,EAAWuB,OACvBO,SAAU/B,EAAUQ,KAJxB,EAiBEwB,iBAAmB,SAACf,GAClB,GAAI,EAAKa,MAAMnB,OAAOM,KAAOjB,EAAUS,KAAM,CAC3C,IAAME,EAAM,YAAO,EAAKmB,MAAMnB,QAC9BA,EAAOM,GAAK,EAAKa,MAAMC,SACvB,IAAMT,EAAaW,EAActB,EAAQM,GACzC,EAAKiB,UAAS,SAAAC,GAAS,MAAK,CAC1Bb,aACAX,SACAoB,SAAUK,EAAYD,EAAUJ,SAAUT,SAzBlD,kEAOIe,KAAKC,SAPT,6BAUI,IAAMxB,EAAO,IAAIyB,MAAM,GACvBzB,EAAK0B,KAAKxC,EAAUS,MACpB4B,KAAKH,SAAS,CACZvB,OAAQG,EACRQ,WAAYrB,EAAWuB,WAd7B,+BA8BY,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEb,OAAQ0B,KAAKP,MAAMnB,OACnBC,WAAYyB,KAAKP,MAAMR,aAAerB,EAAWuB,OACjDnB,QAASgC,KAAKL,mBAEhB,kBAAC,EAAD,CACEV,WAAYe,KAAKP,MAAMR,WACvBC,KAAMc,KAAKP,MAAMC,SACjB1B,QAAS,WAAQ,EAAKiC,eAzChC,GAA0BG,aA+C1B,SAASR,EAActB,EAAqBM,GAC1C,IAAMyB,EAA8B,EAApBC,KAAKC,MAAM3B,EAAI,GACzB4B,EAAW5B,EAAI,EAErB,OACGN,EAAO+B,KAAa/B,EAAO+B,EAAU,IAAM/B,EAAO+B,KAAa/B,EAAO+B,EAAU,IAEhF/B,EAAOkC,KAAclC,EAAOkC,EAAW,IAAMlC,EAAOkC,KAAclC,EAAOkC,EAAW,IAEpFlC,EAAO,KAAOA,EAAO,IAAMA,EAAO,KAAOA,EAAO,IAAMA,EAAO,KAAOX,EAAUS,MAE9EE,EAAO,KAAOA,EAAO,IAAMA,EAAO,KAAOA,EAAO,IAAMA,EAAO,KAAOX,EAAUS,KAExEE,EAAOM,KAAOjB,EAAUM,MAAQL,EAAWyB,SAAWzB,EAAW0B,OAGhEhB,EAAOmC,SAAS9C,EAAUS,MAI7BR,EAAWuB,OAHTvB,EAAWwB,KAKtB,SAASW,EAAYW,EAAyBC,GAC5C,OAAIA,IAAkB/C,EAAWuB,OACxBuB,IAAiB/C,EAAUM,MAAQN,EAAUQ,IAAMR,EAAUM,MAE7DyC,IAAiB/C,EAAUM,MAAQN,EAAUM,MAAQN,EAAUQ,ICjFnE,IAAMyC,EAAO,WAClB,OACE,yBAAK1C,UAAU,QACb,kBAAC,EAAD,QCKS2C,MARf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCDN4C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8b8838cf.chunk.js","sourcesContent":["export enum PieceType {\r\n  none,\r\n  red,\r\n  black\r\n}\r\nexport enum GameStatus {\r\n  gaming,\r\n  draw,\r\n  blackWin,\r\n  redWin,\r\n}","import React from 'react'\r\nimport { PieceType } from '../../types/enums'\r\nimport './index.css'\r\nexport interface IPiece {\r\n  type: PieceType\r\n  onClick?: () => void\r\n}\r\nexport const Piece: React.FC<IPiece> = ({ type, onClick }) => {\r\n  let piece;\r\n  if (type === PieceType.black) { piece = <div className=\"piece-item black\"></div> }\r\n  else if (type === PieceType.red) { piece = <div className=\"piece-item red\"></div> }\r\n  else if (type === PieceType.none) { piece = <div className=\"piece-item none\"></div> }\r\n  return (\r\n    <div className=\"piece\"\r\n      onClick={() => {\r\n        if (type === PieceType.none && onClick) { onClick() }\r\n      }}\r\n    >\r\n      {piece}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { PieceType } from '../../types/enums'\r\nimport { Piece } from '../Piece'\r\nimport './index.css'\r\n\r\nexport interface IBoard {\r\n  pieces: PieceType[]\r\n  isGameOver?: boolean\r\n  onClick?: (index: number) => void\r\n}\r\n\r\nexport const Board: React.FC<IBoard> = ({ pieces, isGameOver, onClick }) => {\r\n  const isGameOverProp = isGameOver!\r\n  const list = pieces.map(\r\n    (pt, i) => <Piece\r\n      key={i}\r\n      type={pt}\r\n      onClick={() => {\r\n        if (onClick && !isGameOverProp) {\r\n          onClick(i)\r\n        }\r\n      }} />\r\n  )\r\n  return (\r\n    <div className=\"board\">\r\n      {list}\r\n    </div>\r\n  )\r\n}\r\nBoard.defaultProps = {\r\n  isGameOver: false\r\n}","import React from 'react'\r\nimport './index.css'\r\nimport { GameStatus, PieceType } from '../../types/enums';\r\n\r\ninterface IProps {\r\n  gameStatus: GameStatus;\r\n  turn: PieceType;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const GameInfo: React.FC<IProps> = ({ gameStatus, turn, onClick }) => {\r\n  let status;\r\n  if (gameStatus === GameStatus.gaming) {\r\n    if (turn === PieceType.black) {\r\n      status = '黑方落子'\r\n    }\r\n    else {\r\n      status = '红方落子'\r\n    }\r\n  }\r\n  else if (gameStatus === GameStatus.draw) { status = '平局' }\r\n  else if (gameStatus === GameStatus.blackWin) { status = '黑方胜' }\r\n  else if (gameStatus === GameStatus.redWin) { status = '红方胜' }\r\n  const content = <div\r\n    className={'message' +\r\n      (gameStatus !== GameStatus.gaming ? ' isOver' : '') +\r\n      (turn === PieceType.black ? ' black' : ' red')}\r\n  >{status}</div>;\r\n  return (\r\n    <div className=\"info\">\r\n      {content}\r\n      <button onClick={onClick}>restart</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { PieceType, GameStatus } from '../../types/enums'\r\nimport { Board } from '../Board'\r\nimport { GameInfo } from '../GameInfo'\r\n\r\ninterface IState {\r\n  gameStatus: GameStatus\r\n  pieces: PieceType[],\r\n  nextDrop: PieceType.black | PieceType.red\r\n}\r\n\r\nexport class Game extends Component<{}, IState> {\r\n  state: IState = {\r\n    pieces: [],\r\n    gameStatus: GameStatus.gaming,\r\n    nextDrop: PieceType.red\r\n  }\r\n  componentDidMount() {\r\n    this.init()\r\n  }\r\n  init() {\r\n    const list = new Array(9)\r\n    list.fill(PieceType.none)\r\n    this.setState({\r\n      pieces: list,\r\n      gameStatus: GameStatus.gaming,\r\n    })\r\n  }\r\n  handlePieceClick = (i: number) => {\r\n    if (this.state.pieces[i] === PieceType.none) {\r\n      const pieces = [...this.state.pieces];\r\n      pieces[i] = this.state.nextDrop;\r\n      const gameStatus = getGameStatus(pieces, i)\r\n      this.setState(prevState => ({\r\n        gameStatus,\r\n        pieces,\r\n        nextDrop: getNextDrop(prevState.nextDrop, gameStatus),\r\n      }))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Board\r\n          pieces={this.state.pieces}\r\n          isGameOver={this.state.gameStatus !== GameStatus.gaming}\r\n          onClick={this.handlePieceClick}\r\n        />\r\n        <GameInfo\r\n          gameStatus={this.state.gameStatus}\r\n          turn={this.state.nextDrop}\r\n          onClick={() => { this.init() }}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\nfunction getGameStatus(pieces: PieceType[], i: number): GameStatus {\r\n  const horiMin = Math.floor(i / 3) * 3;\r\n  const vertiMin = i % 3;\r\n  // win\r\n  if (\r\n    (pieces[horiMin] === pieces[horiMin + 1] && pieces[horiMin] === pieces[horiMin + 2]) // horizontal\r\n    ||\r\n    (pieces[vertiMin] === pieces[vertiMin + 3] && pieces[vertiMin] === pieces[vertiMin + 6]) // vertical\r\n    ||\r\n    (pieces[0] === pieces[4] && pieces[4] === pieces[8] && pieces[4] !== PieceType.none) // oblique\r\n    ||\r\n    (pieces[2] === pieces[4] && pieces[4] === pieces[6] && pieces[4] !== PieceType.none) // oblique\r\n  ) {\r\n    return pieces[i] === PieceType.black ? GameStatus.blackWin : GameStatus.redWin\r\n  }\r\n  // draw\r\n  else if (!pieces.includes(PieceType.none)) {\r\n    return GameStatus.draw\r\n  }\r\n  // gaming\r\n  return GameStatus.gaming\r\n}\r\nfunction getNextDrop(prevNextDrop: PieceType, curGameStatus: GameStatus): PieceType.black | PieceType.red {\r\n  if (curGameStatus === GameStatus.gaming) {\r\n    return prevNextDrop === PieceType.black ? PieceType.red : PieceType.black\r\n  } else {\r\n    return prevNextDrop === PieceType.black ? PieceType.black : PieceType.red\r\n  }\r\n}","import React from 'react'\r\nimport { Game } from './components/Game'\r\n\r\nexport const Test = () => {\r\n  return (\r\n    <div className=\"test\">\r\n      <Game />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Test } from './Test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}